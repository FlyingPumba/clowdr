{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        // Start Services in Docker -- Local Development
        {
            "label": "Start Docker Services -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "docker",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            // Use `"-p", "Hasura 3",` as the first arguments to use a different
            // Docker project name
            // Keywords: project_name, project-name, container name, container-name
            "args": [
                "compose",
                "-f",
                "docker-compose.yaml",
                "-f",
                "docker-compose.db.yaml",
                "--env-file",
                "./hasura/.env.local",
                "-p",
                "${input:docker-project-name}",
                "up",
                "-d"
            ]
        },
        // Hasura Console -- Local Development
        {
            "label": "Hasura Console -- Local Development",
            "type": "shell",
            "dependsOn": "Start Docker Services -- Local Development",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/hasura"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["console-when-ready"]
        },
        // Hasura Console -- CI Testing
        {
            "label": "Hasura Console -- CI Testing",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/hasura"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["console-when-ready", "--envfile='./.env.ci-test'"]
        },
        // All -- GraphQL Codegen
        {
            "label": "All -- GraphQL Codegen",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["codegen", "-r"]
        },
        // Offline -- GraphQL Codegen
        {
            "label": "Offline -- GraphQL Codegen",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["codegen", "-r", "--filter \"...^@midspace/graphql\""]
        },
        // Action service -- Local Development
        {
            "label": "Actions Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/actions"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        // Action service -- Heroku Local
        {
            "label": "Actions Service -- Heroku Local",
            "type": "shell",
            "isBackground": true,
            "command": "heroku",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["local", "web"]
        },
        // Auth service -- Local Development
        {
            "label": "Auth Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/auth"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        // Caches service -- Local Development
        {
            "label": "Caches Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/caches"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        // Real-time service -- Local Development
        {
            "label": "Real-time Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/realtime"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        // Playout service -- Local Development
        {
            "label": "Playout Service -- Local Development",
            "type": "shell",
            "isBackground": true,
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/services/playout"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        // Frontend -- Local Development
        {
            "label": "Frontend -- Local Development",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/frontend"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["dev"]
        },
        // Frontend -- Production Build
        {
            "label": "Frontend -- Production Build",
            "type": "shell",
            "command": "pnpm",
            "args": ["build"],
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/frontend"
            },
            "group": "build"
        },
        // Frontend -- Serve Production Build
        {
            "label": "Frontend -- Serve Production Build",
            "type": "shell",
            "command": "pnpm",
            "args": ["vite", "preview"],
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/frontend"
            }
        },
        // Prettier
        {
            "label": "Prettier: Format code",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["prettier", "--write", "."]
        },
        // All -- Build
        {
            "label": "All -- Build",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["build", "-r"]
        },
        // Packetriot
        {
            "label": "Packetriot",
            "type": "shell",
            "command": "pktriot",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["start", "--config", "pktriot.json"]
        },
        // Run All -- Local Development
        {
            "label": "Run All -- Local Development",
            "dependsOn": [
                "Packetriot",
                "Hasura Console -- Local Development",
                "Auth Service -- Local Development",
                "Actions Service -- Local Development",
                "Caches Service -- Local Development",
                "Real-time Service -- Local Development",
                "Playout Service -- Local Development",
                "Frontend -- Local Development"
            ],
            "dependsOrder": "parallel",
            "isBackground": true,
            "problemMatcher": []
        },
        // Run Minimal -- Local Development
        {
            "label": "Run Minimal -- Local Development",
            "dependsOn": [
                "Packetriot",
                "Hasura Console -- Local Development",
                "Auth Service -- Local Development",
                "Caches Service -- Local Development",
                "Actions Service -- Local Development",
                "Frontend -- Local Development"
            ],
            "dependsOrder": "parallel",
            "isBackground": true,
            "problemMatcher": []
        },
        {
            "label": "AWS -- Bootstrap account",
            "detail": "AWS CDK requires the account to be 'bootstrapped' first.",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/aws",
                "env": {
                    "DOTENV_CONFIG_PATH": ".env.${input:aws-profile-name}",
                    "AWS_PROFILE": "${input:aws-profile-name}"
                }
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["bootstrap"]
        },
        {
            "label": "AWS -- Deploy stacks",
            "detail": "Deploy all CDK stacks to an AWS account. You will be asked which profile you want to deploy to.",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "options": {
                "cwd": "${workspaceFolder}/aws",
                "env": {
                    "DOTENV_CONFIG_PATH": ".env.${input:aws-profile-name}",
                    "AWS_PROFILE": "${input:aws-profile-name}"
                }
            },
            "runOptions": {
                "instanceLimit": 1
            },
            "args": ["deploy:all"]
        },
        {
            "label": "AWS -- Open console",
            "detail": "Open the AWS console in browser.",
            "type": "shell",
            "command": "aws-vault",
            "problemMatcher": [],
            "args": ["login", "${input:aws-profile-name}-internal"]
        },
        {
            "label": "Fix Frontend ESLint errors/warnings",
            "type": "shell",
            "command": "pnpm",
            "problemMatcher": [],
            "args": ["eslint", "--ext", ".tsx", "--ext", ".ts", "--fix", "./frontend/src/aspects"]
        }
    ],
    "inputs": [
        {
            "id": "docker-project-name",
            "description": "Docker project name",
            "default": "clowdr",
            "type": "promptString"
        },
        {
            "id": "aws-profile-name",
            "description": "AWS profile name",
            "default": "sandbox",
            "type": "promptString"
        }
    ]
}
